{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","className","onClick","selectFriend","name","alt","src","image","Wrapper","children","Title","href","score","message","App","state","friends","unselectedFriends","shuffleArray","array","i","length","j","Math","floor","random","undefined","find","item","setState","newFriends","filter","this","map","friend","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kxDAWeA,G,MARI,SAAAC,GAAK,OACtB,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,iBACX,yBAAKC,QAAS,kBAAMF,EAAMG,aAAaH,EAAMI,OAAOC,IAAKL,EAAMI,KAAME,IAAKN,EAAMO,Y,YCCzEC,MAJf,SAAiBR,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMS,W,MCS1BC,MAVf,SAAeV,GAEb,OAAO,yBAAKC,UAAU,aACtB,uBAAGU,KAAK,KAAI,wBAAIV,UAAU,QAAQU,KAAK,IAA3B,8BACZ,wBAAIV,UAAU,SAAd,iDACA,yBAAKA,UAAU,UAAf,YAAkCD,EAAMY,MAAxC,IAAgDZ,EAAMa,QAAtD,O,OCuEaC,E,2MAtEbC,MAAQ,CACNF,QAAS,GACTG,QAASA,EACTJ,MAAO,EACPK,kBAAmBD,G,EAGrBE,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,O,EAK7CnB,aAAe,SAAAC,GAKb,QAAmBsB,IAJA,EAAKX,MAAME,kBAAkBU,MAC9C,SAAAC,GAAI,OAAIA,EAAKxB,OAASA,KAKtB,EAAKyB,SAAS,CACZhB,QAAS,YACTD,MAAO,EACPI,QAASA,EACTC,kBAAmBD,QAGhB,CAEL,IAAMc,EAAa,EAAKf,MAAME,kBAAkBc,QAC9C,SAAAH,GAAI,OAAIA,EAAKxB,OAASA,KAGxB,EAAKyB,SAAS,CACZhB,QAAS,qBACTD,MAAO,EAAKG,MAAMH,MAAQ,EAC1BI,QAASA,EACTC,kBAAmBa,IAGpB,EAAKf,MAAMH,OAAS,IACrB,EAAKiB,SAAS,CACZhB,QAAS,WACTD,MAAO,EACPI,QAASA,EACTC,kBAAmBD,IAKvB,EAAKE,aAAaF,I,wEAGV,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOJ,MAAOoB,KAAKjB,MAAMH,MAAOC,QAASmB,KAAKjB,MAAMF,UACnDmB,KAAKjB,MAAMC,QAAQiB,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACE9B,KAAM8B,EAAO9B,KACbG,MAAO2B,EAAO3B,MACdJ,aAAc,EAAKA,aACnBS,MAAO,EAAKG,MAAMH,gB,GAhEZuB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0776752f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst FriendCard = props => (\n  <div className=\"card float-right border-0\">\n    <div className=\"img-container\">\n        <img onClick={() => props.selectFriend(props.name)} alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Children } from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n\n  return <div className=\"titleMain\">\n  <a href=\".\"><h1 className=\"title\" href=\"\">Click! Oink! Click! Oink!</h1></a>\n  <h4 className=\"rules\">Click on image to earn points! But only once!</h4>\n  <div className=\"scores\">Scores:  {props.score} {props.message} </div>\n  </div>\n\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport \"./App.css\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    message: \"\",\n    friends: friends,\n    score: 0,\n    unselectedFriends: friends\n  };\n\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n  selectFriend = name => {\n    const findFriend = this.state.unselectedFriends.find(\n      item => item.name === name\n    );\n\n    if (findFriend === undefined) {\n      // failure to select a new dog\n      this.setState({\n        message: \"You lost!\",\n        score: 0,\n        friends: friends,\n        unselectedFriends: friends\n      });\n\n    } else {\n      // success to select a new dog\n      const newFriends = this.state.unselectedFriends.filter(\n        item => item.name !== name\n      );\n\n      this.setState({\n        message: \"You guessed right!\",\n        score: this.state.score + 1,\n        friends: friends,\n        unselectedFriends: newFriends\n      });\n    }\n    if(this.state.score >= 11) {\n      this.setState({\n        message: \"You won!\",\n        score: 0,\n        friends: friends,\n        unselectedFriends: friends\n      });\n\n    }\n\n    this.shuffleArray(friends);\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title score={this.state.score} message={this.state.message} />\n        {this.state.friends.map(friend => (\n          <FriendCard\n            name={friend.name}\n            image={friend.image}\n            selectFriend={this.selectFriend}\n            score={this.state.score}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}